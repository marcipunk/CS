@page "/WRequestList"


@using System.Text.RegularExpressions;
@using BlazorDemo.Showcase.Models;
@using BlazorDemo.Showcase.Client.Components.WORK;
@using BlazorDemo.Showcase.Services.DataProviders;
@using Microsoft.AspNetCore.Authorization;
@using DevExpress.Blazor;
@using DevExpress.Blazor.Internal;


@inject WorkRequestDataProvider DataProvider

@implements IDisposable


<div class="content-root">
    <div class="card toolbar">
        <DxToolbar Title="Work Requests" ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
            <DxToolbarItem Text="@StatusFilterValue" RenderStyleMode="ToolbarItemRenderStyleMode.Plain">
                <Items>
                    <DxToolbarItem Text="All" Click="FilterByStatus" />
                    @foreach(var status in Statuses) {
                        <DxToolbarItem Text="@status" Click="FilterByStatus" />
                    }
                </Items>
            </DxToolbarItem>
            <DxToolbarItem Text="Add Work Request" Click="OnAddWorkRequestClick" Alignment="ToolbarItemAlignment.Right" IconCssClass="add-icon icon medium-icon" />
            <DxToolbarItem Tooltip="Column Chooser" Alignment="ToolbarItemAlignment.Right" Click="OnColumnChooserItemClick" IconCssClass="column-chooser-icon icon medium-icon" />
            <DxToolbarItem Text="Export" Alignment="ToolbarItemAlignment.Right" IconCssClass="export-icon icon medium-icon">
                <Items>
                    <DxToolbarItem Text="Export all data to Excel" Click="ExportAllDataToExcel" />
                    <DxToolbarItem Text="Export selected rows to Excel" Click="ExportSelectedRowsToExcel" />
                    <DxToolbarItem Text="Export all data to CSV" Click="ExportAllDataToCsv" />
                    <DxToolbarItem Text="Export selected rows to CSV" Click="ExportSelectedRowsDataToCsv" />
                    <DxToolbarItem Text="Export all data to PDF" Click="ExportAllDataToPdf" />
                    <DxToolbarItem Text="Export selected rows to PDF" Click="ExportSelectedRowsDataToPdf" />
                </Items>
            </DxToolbarItem>
            <DxToolbarItem Alignment="ToolbarItemAlignment.Right" CssClass="search-textbox-item" Tooltip="Search">
                <Template Context="SearchContext">
                    <div class="custom-item">
                        <DxSearchBox CssClass="search-textbox"
                                     NullText="Search"
                                     BindValueMode="BindValueMode.OnInput"
                                     ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                     @bind-Text=SearchText />
                    </div>
                </Template>
            </DxToolbarItem>
            <DxToolbarItem Tooltip="Refresh" BeginGroup="true" Click="@LoadGridDataAsync" Alignment="ToolbarItemAlignment.Right" IconCssClass="refresh-icon icon medium-icon" />
        </DxToolbar>
    </div>
   

    <TargetContent>
        <div class="h-100">
            <DxLoadingPanel Visible="@(!IsDataLoaded)" IsContentBlocked="true" IsContentVisible="false"
                IndicatorVisible="true" IndicatorAreaVisible="true" ZIndex="101" Text="Loading...">
                <DxGrid @ref="Grid" Data="Data" CssClass="workrequest-list" SearchText="@SearchText"
                    EditMode="GridEditMode.PopupEditForm" PopupEditFormCssClass="pw-800" SkeletonRowsEnabled="true"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always" TextWrapEnabled="false"
                    FocusedRowEnabled="true" ShowAllRows="true" VirtualScrollingEnabled="true"
                    HighlightRowOnHover="true">
                    <Columns>
                        <DxGridSelectionColumn Width="1.5em" />

                        <DxGridDataColumn FieldName="CustomerName" Width="30%"/>
                        <DxGridDataColumn FieldName="Status" Caption="Állapot" Width="15%">
                            <CellDisplayTemplate>
                                <WorkRequestStatus Value="@(context.Value as string)" />
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="Subject" Caption="Tárgy" Width="40%" />
                        <DxGridDataColumn FieldName="CreatedDate" Width="15%" MinWidth="50" />
                    </Columns>
                    @* <EditFormTemplate Context="EditFormContext">
                                @{
                                    var workrequest = (WorkRequest)EditFormContext.EditModel;
                                }
                                <DxFormLayout CssClass="w-100">
                                    <DxFormLayoutItem Caption="Name:" ColSpanMd="6">
                                        @EditFormContext.GetEditor("Name")
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Company:" ColSpanMd="6">
                                        @EditFormContext.GetEditor("Company")
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Position:" ColSpanMd="6">
                                        @EditFormContext.GetEditor("Position")
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Status:" ColSpanMd="6">
                                        <DxComboBox @bind-Value="@workrequest.Status" Data="@Statuses" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Assigned To:" ColSpanMd="6">
                                        @EditFormContext.GetEditor("AssignedTo")
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Phone:" ColSpanMd="6">
                                        <DxMaskedInput @bind-Value="@workrequest.Phone" Mask="+1(000)000-0000" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Email:" ColSpanMd="6">
                                        <DxMaskedInput @bind-Value="@workrequest.Email"
                                                       Mask="@(@"(\w|[.-])+@(\w|-)+\.(\w|-){2,4}")"
                                                       MaskMode="MaskMode.RegEx" />
                                    </DxFormLayoutItem>
                                </DxFormLayout>
                            </EditFormTemplate> *@
                </DxGrid>
            </DxLoadingPanel>
        </div>

    </TargetContent>
</div>
@code {
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    WorkRequest workRequest = new WorkRequest();

    [CascadingParameter(Name = "ParentSizeMode")]
    SizeMode SizeMode { get; set; }
    List<WorkRequest>? Data { get; set; }
    bool IsDataLoaded { get; set; }
    bool IsWorkRequestPanelOpen { get; set; }
    bool IsWorkRequestPanelPinned { get; set; }
    bool IsActiveWorkRequestLoading { get; set; }
    DrawerMode DrawerMode => IsWorkRequestPanelPinned ? DrawerMode.Shrink : DrawerMode.Overlap;
    WorkRequestDetail? ActiveWorkRequest { get; set; }

    IGrid? Grid { get; set; }
    string? SearchText { get; set; }
    string StatusFilterValue { get; set; } = "All";
    string[] Statuses { get; } = new[] { "Elfogadva","Bejelentve", "Törölt", "Folyamatban" };

    protected override async Task OnInitializedAsync()
    {
        await LoadGridDataAsync();
        await base.OnInitializedAsync();
    }

    async Task LoadGridDataAsync()
    {
        IsDataLoaded = false;
        Data = await DataProvider.GetAsync(
        tenantId: 1,
        customerId: 30,
        statusId: 0,
        createdBefore: new DateTime(2025, 12, 31),
        createdAfter: new DateTime(2025, 1, 1),
        pageNumber: 1,
        pageSize: 100, // changed from 1 to 100
        cancellationToken: disposalTokenSource.Token
        );
        IsDataLoaded = true;
    }


    void OnDataChanged(List<WorkRequest> data) => Data = data;

    void OnPinClick() => IsWorkRequestPanelPinned = !IsWorkRequestPanelPinned;

    void OnCloseClick()
    {
        IsWorkRequestPanelOpen = false;
        IsWorkRequestPanelPinned = false;
    }

    string GetPinButtonIconCss() => $"{(IsWorkRequestPanelPinned ? "pinned-icon" : "unpinned-icon")} medium-icon";

    @* void OnActiveWorkRequestChanged(WorkRequestDetail workrequest) {
        var index = Data!.FindIndex(c => c.Id == ActiveWorkRequest!.Id);
        if(index >= 0) {
            var newData = new List<WorkRequest>(Data);
            newData[index] = new WorkRrequest {
                Id = workrequest.Id,
                Company = workrequest.Company,
                AssignedTo = workrequest.Manager,
                Email = workrequest.Email,
                Name = workrequest.Name,
                Phone = workrequest.Phone,
                Position = workrequest.Position,
                Status = workrequest.Status
            };
            Data = newData;
        } 
    }*@

    Task OnAddWorkRequestClick() => Grid!.StartEditNewRowAsync();

    void OnColumnChooserItemClick(ToolbarItemClickEventArgs e) => Grid!.ShowColumnChooser();

    Task ExportAllDataToExcel() => Grid!.ExportToXlsxAsync("WorkRequests");

    Task ExportSelectedRowsToExcel() => Grid!.ExportToXlsxAsync("Selected WorkRequests", new GridXlExportOptions
    {
        ExportSelectedRowsOnly = true
    });

    Task ExportAllDataToCsv() => Grid!.ExportToCsvAsync("WorkRequests");

    Task ExportSelectedRowsDataToCsv() => Grid!.ExportToCsvAsync("Selected WorkRequests", new GridCsvExportOptions
    {
        ExportSelectedRowsOnly = true
    });

    Task ExportAllDataToPdf() => Grid!.ExportToPdfAsync("WorkRequests");

    Task ExportSelectedRowsDataToPdf() => Grid!.ExportToPdfAsync("Selected WorkRequests", new GridPdfExportOptions
    {
        ExportSelectedRowsOnly = true
    });

    void FilterByStatus(ToolbarItemClickEventArgs item)
    {
        StatusFilterValue = item.Info.Text;
        Grid!.FilterBy("Status", GridFilterRowOperatorType.Equal, StatusFilterValue != "All" ? StatusFilterValue : null);
    }

    @* async void OnRowClick(GridRowClickEventArgs args) {
        if(!IsWorkRequestPanelOpen) {
            IsWorkRequestPanelOpen = true;
            ActiveWorkRequest = null;
        }
        IsActiveWorkRequestLoading = true;
        var workRequest = (WorkRequest)Grid!.GetDataItem(args.VisibleIndex);
        ActiveWorkRequest = await DataProvider.GetAsync(tenantId: workRequest.TenantId, customerId: workrequestworkRequest.CustomerId, statusId: workRequest.StatusId, createdBefore: workRequest.CreatedBefore, createdAfter: workRequest.CreatedAfter, pageNumber: 1, pageSize: 1, cancellationToken: disposalTokenSource.Token)
            .ContinueWith(t => t.Result.FirstOrDefault(), disposalTokenSource.Token);
        IsActiveWorkRequestLoading = false;
        StateHasChanged();
    }  *@

    string GetWorkRequestPanelWidth() => SizeMode switch
    {
        SizeMode.Small => "20.25rem",
        SizeMode.Large => "27rem",
        _ => "23.625rem",
    };

    void IDisposable.Dispose()
    {
        disposalTokenSource.Cancel();
        disposalTokenSource.Dispose();
    }
}
