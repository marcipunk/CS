@page "/WRequestList"


@using System.Text.RegularExpressions;
@using System.Linq;
@using BlazorDemo.Showcase.Models;
@using BlazorDemo.Showcase.Client.Components.WORK;
@using BlazorDemo.Showcase.Services.DataProviders;
@using Microsoft.AspNetCore.Authorization;
@using DevExpress.Blazor;
@using DevExpress.Blazor.Internal;


@inject WorkRequestDataProvider DataProvider

@implements IDisposable


<div class="content-root">
    <div class="card toolbar">
        <DxToolbar Title="Work Requests" ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
            <DxToolbarItem Text="@StatusFilterValue" RenderStyleMode="ToolbarItemRenderStyleMode.Plain">
                <Items>
                    <DxToolbarItem Text="All" Click="FilterByStatus" />
                    @foreach(var status in Statuses) {
                        <DxToolbarItem Text="@status" Click="FilterByStatus" />
                    }
                </Items>
            </DxToolbarItem>
            <DxToolbarItem Text="Add Work Request" Click="OnAddWorkRequestClick" Alignment="ToolbarItemAlignment.Right" IconCssClass="add-icon icon medium-icon" />
            <DxToolbarItem Tooltip="Column Chooser" Alignment="ToolbarItemAlignment.Right" Click="OnColumnChooserItemClick" IconCssClass="column-chooser-icon icon medium-icon" />
            <DxToolbarItem Text="Export" Alignment="ToolbarItemAlignment.Right" IconCssClass="export-icon icon medium-icon">
                <Items>
                    <DxToolbarItem Text="Export all data to Excel" Click="ExportAllDataToExcel" />
                    <DxToolbarItem Text="Export selected rows to Excel" Click="ExportSelectedRowsToExcel" />
                    <DxToolbarItem Text="Export all data to CSV" Click="ExportAllDataToCsv" />
                    <DxToolbarItem Text="Export selected rows to CSV" Click="ExportSelectedRowsDataToCsv" />
                    <DxToolbarItem Text="Export all data to PDF" Click="ExportAllDataToPdf" />
                    <DxToolbarItem Text="Export selected rows to PDF" Click="ExportSelectedRowsDataToPdf" />
                </Items>
            </DxToolbarItem>
            <DxToolbarItem Alignment="ToolbarItemAlignment.Right" CssClass="search-textbox-item" Tooltip="Search">
                <Template Context="SearchContext">
                    <div class="custom-item">
                        <DxSearchBox CssClass="search-textbox"
                                     NullText="Search"
                                     BindValueMode="BindValueMode.OnInput"
                                     ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                     @bind-Text=SearchText />
                    </div>
                </Template>
            </DxToolbarItem>
            <DxToolbarItem Tooltip="Refresh" BeginGroup="true" Click="@LoadGridDataAsync" Alignment="ToolbarItemAlignment.Right" IconCssClass="refresh-icon icon medium-icon" />
        </DxToolbar>
    </div>
   

    <div class="h-100">
            <DxLoadingPanel Visible="@(!IsDataLoaded)" IsContentBlocked="true" IsContentVisible="false"
                IndicatorVisible="true" IndicatorAreaVisible="true" ZIndex="101" Text="Loading...">
                <DxGrid @ref="Grid" Data="Data" CssClass="workrequest-list" SearchText="@SearchText"
                    EditMode="GridEditMode.PopupEditForm" PopupEditFormCssClass="pw-800" SkeletonRowsEnabled="true"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always" TextWrapEnabled="false"
                    FocusedRowEnabled="true" ShowAllRows="true" VirtualScrollingEnabled="true"
                    HighlightRowOnHover="true"
                    CustomizeEditModel="OnCustomizeEditModel"
                    EditModelSaving="OnEditModelSaving">
                    <Columns>
                        <DxGridSelectionColumn Width="1.5em" />
                        <DxGridDataColumn FieldName="Id" Caption="#Id" Width="4rem" Visible="false" />
                        <DxGridDataColumn FieldName="Subject" Caption="Tárgy" />
                        <DxGridDataColumn FieldName="CustomerName" Caption="Ügyfél" />
                        <DxGridDataColumn FieldName="CreatedDate" Caption="Létrehozva" DisplayFormat="d" />
                        <DxGridDataColumn FieldName="Status" Caption="Státusz">
                            <CellDisplayTemplate Context="cell">
                                <WorkRequestStatus Value="@cell.DisplayText" />
                            </CellDisplayTemplate>
                        </DxGridDataColumn>

                        <!-- Form-only fields (not shown in the list) -->
                        <DxGridDataColumn FieldName="Description" Visible="false" />
                        <DxGridDataColumn FieldName="PreferedWorkerName" Visible="false" />
                    </Columns>
                    <EditFormTemplate Context="EditFormContext">
                        @{
                            // Ensure the edit form uses the detail model
                            var detail = EditFormContext.EditModel as WorkRequestDetail ?? new WorkRequestDetail();
                        }
                        <DxFormLayout CssClass="w-100">
                            <DxFormLayoutItem Caption="Subject:" ColSpanMd="6">
                                @EditFormContext.GetEditor("Subject")
                            </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Customer:" ColSpanMd="6">
                                    @if (CustomerOptions is { Count: > 0 })
                                    {
                                        <DxComboBox TData="CustomerOption"
                                                    TValue="int"
                                                    Data="@GetCustomerOptionsSnapshot()"
                                                    TextFieldName="Name"
                                                    ValueFieldName="Id"
                                                    @bind-Value="detail.CustomerId"
                                                    NullText="Select customer"
                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                    }
                                    else
                                    {
                                        <div class="text-muted">No customers available</div>
                                    }
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Earliest Start:" ColSpanMd="6">
                                    <DxDateEdit @bind-Date="detail.EarliestStartDate" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Latest End:" ColSpanMd="6">
                                    <DxDateEdit @bind-Date="detail.LatestEndDate" />
                                </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Description:" ColSpanMd="12">
                                @EditFormContext.GetEditor("Description")
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Status:" ColSpanMd="6">
                                <DxComboBox TData="StatusOption"
                                            TValue="int"
                                            Data="@StatusOptions"
                                            ValueFieldName="Id"
                                            TextFieldName="Name"
                                            @bind-Value="detail.StatusId" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Prefered Worker Name:" ColSpanMd="6">
                               @EditFormContext.GetEditor("PreferedWorkerName") 
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </EditFormTemplate>
                </DxGrid>
            </DxLoadingPanel>
        </div>

</div>
@code {
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    WorkRequest workRequest = new WorkRequest();
    WorkRequestDetail? editModel;
    bool _isDisposed;
    bool _startEditRequested;

    [CascadingParameter(Name = "ParentSizeMode")]
    SizeMode SizeMode { get; set; }
    List<WorkRequest>? Data { get; set; }
    bool IsDataLoaded { get; set; }
    bool IsWorkRequestPanelOpen { get; set; }
    bool IsWorkRequestPanelPinned { get; set; }
    bool IsActiveWorkRequestLoading { get; set; }
    DrawerMode DrawerMode => IsWorkRequestPanelPinned ? DrawerMode.Shrink : DrawerMode.Overlap;
    WorkRequestDetail? ActiveWorkRequest { get; set; }

    IGrid? Grid { get; set; }
    string? SearchText { get; set; }
    string StatusFilterValue { get; set; } = "All";
    string[] Statuses { get; } = new[] { "Elfogadva","Bejelentve", "Törölt", "Folyamatban" };
    record StatusOption(int Id, string Name);
    List<StatusOption> StatusOptions { get; } = new() { new(0, "Bejelentve"), new(1, "Elfogadva"), new(2, "Törölt"), new(3, "Folyamatban") };

    // App user and customer dropdown support
    WorkRequestDataProvider.AppUserDto? CurrentUser { get; set; }
    List<CustomerOption> CustomerOptions { get; set; } = new();
    class CustomerOption { public int Id { get; set; } public string Name { get; set; } = string.Empty; public CustomerOption(){} public CustomerOption(int id, string name){ Id=id; Name=name; } }

    protected override async Task OnInitializedAsync()
    {
        // Populate dropdown options: prefer dedicated lookup endpoint; fallback to appuser
        var lookupCustomers = await DataProvider.GetUserCustomersAsync(disposalTokenSource.Token);
        if (lookupCustomers is { Count: > 0 })
        {
            foreach (var c in lookupCustomers)
            {
                if (c.Id <= 0) continue;
                var name = !string.IsNullOrWhiteSpace(c.Name) ? c.Name! : $"Customer {c.Id}";
                if (!CustomerOptions.Any(o => o.Id == c.Id))
                    CustomerOptions.Add(new CustomerOption(c.Id, name));
            }
        }
        else
        {
            CurrentUser = await DataProvider.GetCurrentAppUserAsync(disposalTokenSource.Token);
            if (CurrentUser?.CustomerAppUsers is not null)
            {
                foreach (var cau in CurrentUser.CustomerAppUsers)
                {
                    var id = cau.Customer?.Id > 0 ? cau.Customer.Id : (cau.CustomerId > 0 ? cau.CustomerId : 0);
                    if (id <= 0) continue;
                    var name = cau.Customer?.Name;
                    if (string.IsNullOrWhiteSpace(name)) name = $"Customer {id}";
                    if (!CustomerOptions.Any(o => o.Id == id))
                        CustomerOptions.Add(new CustomerOption(id, name));
                }
            }
        }

        await LoadGridDataAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isDisposed)
            return;
        if (_startEditRequested)
        {
            _startEditRequested = false;
            var localGrid = Grid;
            if (localGrid is not null)
            {
                try { await localGrid.StartEditNewRowAsync(); }
                catch { /* swallow to avoid circuit crash */ }
                // Load options after the popup is open to avoid races during template construction
                _ = LoadCustomerOptionsAfterOpenAsync();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task LoadGridDataAsync()
    {
        IsDataLoaded = false;
    var result = await DataProvider.GetAsync(
        tenantId: 1,
        customerId: 30,
        statusId: 0,
        createdBefore: new DateTime(2025, 12, 31),
        createdAfter: new DateTime(2025, 1, 1),
        pageNumber: 1,
        pageSize: 100, // changed from 1 to 100
        cancellationToken: disposalTokenSource.Token
        );
    Data = result ?? new List<WorkRequest>();
        IsDataLoaded = true;
    }


    void OnDataChanged(List<WorkRequest> data) => Data = data;

    void OnPinClick() => IsWorkRequestPanelPinned = !IsWorkRequestPanelPinned;

    void OnCloseClick()
    {
        IsWorkRequestPanelOpen = false;
        IsWorkRequestPanelPinned = false;
    }

    string GetPinButtonIconCss() => $"{(IsWorkRequestPanelPinned ? "pinned-icon" : "unpinned-icon")} medium-icon";

    @* void OnActiveWorkRequestChanged(WorkRequestDetail workrequest) {
        var index = Data!.FindIndex(c => c.Id == ActiveWorkRequest!.Id);
        if(index >= 0) {
            var newData = new List<WorkRequest>(Data);
            newData[index] = new WorkRrequest {
                Id = workrequest.Id,
                Company = workrequest.Company,
                AssignedTo = workrequest.Manager,
                Email = workrequest.Email,
                Name = workrequest.Name,
                Phone = workrequest.Phone,
                Position = workrequest.Position,
                Status = workrequest.Status
            };
            Data = newData;
        } 
    }*@

    void OnAddWorkRequestClick()
    {
        if (_isDisposed)
            return;
        // Defer edit popup opening to the next render cycle
        _startEditRequested = true;
        _ = InvokeAsync(StateHasChanged);
    }

    async Task LoadCustomerOptionsAfterOpenAsync()
    {
        try
        {
            await EnsureCustomerOptionsAsync();
            if (!_isDisposed)
                await InvokeAsync(StateHasChanged);
        }
        catch { /* ignore transient failures */ }
    }

    async Task EnsureCustomerOptionsAsync()
    {
        if (_isDisposed)
            return;
        if (CustomerOptions is { Count: > 0 })
            return;
        try
        {
            // First try the lookup endpoint
            var lookupCustomers = await DataProvider.GetUserCustomersAsync();
            if (lookupCustomers is { Count: > 0 })
            {
                foreach (var c in lookupCustomers)
                {
                    if (c.Id <= 0) continue;
                    var name = !string.IsNullOrWhiteSpace(c.Name) ? c.Name! : $"Customer {c.Id}";
                    if (!CustomerOptions.Any(o => o.Id == c.Id))
                        CustomerOptions.Add(new CustomerOption(c.Id, name));
                }
                return;
            }
            // Fallback to appuser parsing
            CurrentUser ??= await DataProvider.GetCurrentAppUserAsync();
            if (CurrentUser?.CustomerAppUsers is not null)
            {
                foreach (var cau in CurrentUser.CustomerAppUsers)
                {
                    var id = cau.Customer?.Id > 0 ? cau.Customer.Id : (cau.CustomerId > 0 ? cau.CustomerId : 0);
                    if (id <= 0) continue;
                    var name = cau.Customer?.Name;
                    if (string.IsNullOrWhiteSpace(name)) name = $"Customer {id}";
                    if (!CustomerOptions.Any(o => o.Id == id))
                        CustomerOptions.Add(new CustomerOption(id, name));
                }
            }
        // No explicit StateHasChanged here; the caller decides when to re-render
        }
        catch { /* ignore transient failures */ }
    }

    List<CustomerOption> GetCustomerOptionsSnapshot() => CustomerOptions.ToList();

    void OnColumnChooserItemClick(ToolbarItemClickEventArgs e) => Grid!.ShowColumnChooser();

    Task ExportAllDataToExcel() => Grid!.ExportToXlsxAsync("WorkRequests");

    Task ExportSelectedRowsToExcel() => Grid!.ExportToXlsxAsync("Selected WorkRequests", new GridXlExportOptions
    {
        ExportSelectedRowsOnly = true
    });

    Task ExportAllDataToCsv() => Grid!.ExportToCsvAsync("WorkRequests");

    Task ExportSelectedRowsDataToCsv() => Grid!.ExportToCsvAsync("Selected WorkRequests", new GridCsvExportOptions
    {
        ExportSelectedRowsOnly = true
    });

    Task ExportAllDataToPdf() => Grid!.ExportToPdfAsync("WorkRequests");

    Task ExportSelectedRowsDataToPdf() => Grid!.ExportToPdfAsync("Selected WorkRequests", new GridPdfExportOptions
    {
        ExportSelectedRowsOnly = true
    });

    void FilterByStatus(ToolbarItemClickEventArgs item)
    {
        StatusFilterValue = item.Info.Text;
        Grid!.FilterBy("Status", GridFilterRowOperatorType.Equal, StatusFilterValue != "All" ? StatusFilterValue : null);
    }

    @* async void OnRowClick(GridRowClickEventArgs args) {
        if(!IsWorkRequestPanelOpen) {
            IsWorkRequestPanelOpen = true;
            ActiveWorkRequest = null;
        }
        IsActiveWorkRequestLoading = true;
        var workRequest = (WorkRequest)Grid!.GetDataItem(args.VisibleIndex);
        ActiveWorkRequest = await DataProvider.GetAsync(tenantId: workRequest.TenantId, customerId: workrequestworkRequest.CustomerId, statusId: workRequest.StatusId, createdBefore: workRequest.CreatedBefore, createdAfter: workRequest.CreatedAfter, pageNumber: 1, pageSize: 1, cancellationToken: disposalTokenSource.Token)
            .ContinueWith(t => t.Result.FirstOrDefault(), disposalTokenSource.Token);
        IsActiveWorkRequestLoading = false;
                _isDisposed = true;
        StateHasChanged();
    }  *@

    string GetWorkRequestPanelWidth() => SizeMode switch
    {
        SizeMode.Small => "20.25rem",
        SizeMode.Large => "27rem",
        _ => "23.625rem",
    };

    void IDisposable.Dispose()
    {
        disposalTokenSource.Cancel();
        disposalTokenSource.Dispose();
        _isDisposed = true;
    }

    // Grid callbacks to use detail model without bloating the list payload
    async Task OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            editModel = new WorkRequestDetail
            {
                CreatedDate = DateTime.UtcNow,
                TimeStamp = DateTime.UtcNow,
                TenantId = CurrentUser?.PrimaryTenantId > 0 ? CurrentUser.PrimaryTenantId : 1,
                RequestorId = CurrentUser?.Id ?? 0,
                RequestorName = CurrentUser?.Name,
                StatusId = 0
            };
            // Preselect the only available customer, if there is exactly one
            if (CustomerOptions.Count == 1)
            {
                editModel.CustomerId = CustomerOptions[0].Id;
                editModel.CustomerName = CustomerOptions[0].Name;
            }
            e.EditModel = editModel;
            return;
        }

        var listItem = e.DataItem as WorkRequest;
        if (listItem is null)
            return;
        editModel = await DataProvider.GetDetailAsync(listItem.Id, disposalTokenSource.Token);
        e.EditModel = editModel ?? new WorkRequestDetail
        {
            Id = listItem.Id,
            Subject = listItem.Subject,
            CustomerName = listItem.CustomerName,
            Status = listItem.Status,
            TenantId = listItem.TenantId
        };
    }

    async Task OnEditModelSaving(GridEditModelSavingEventArgs e)
    {
        var detail = e.EditModel as WorkRequestDetail;
        if (detail is null)
            return;
        // Require a customer selection when creating a new request
        if (detail.Id <= 0 && detail.CustomerId <= 0)
        {
            e.Cancel = true;
            return;
        }
        // Fill derived/default fields
        if (string.IsNullOrEmpty(detail.CustomerName) && detail.CustomerId > 0)
            detail.CustomerName = CustomerOptions.FirstOrDefault(x => x.Id == detail.CustomerId)?.Name;
        if (detail.CreatedDate == default)
            detail.CreatedDate = DateTime.UtcNow;
        if (detail.TimeStamp == default)
            detail.TimeStamp = DateTime.UtcNow;
        if (detail.TenantId <= 0)
            detail.TenantId = CurrentUser?.PrimaryTenantId > 0 ? CurrentUser.PrimaryTenantId : 1;
        if (detail.RequestorId <= 0)
            detail.RequestorId = CurrentUser?.Id ?? 0;
        if (string.IsNullOrEmpty(detail.RequestorName))
            detail.RequestorName = CurrentUser?.Name;
        bool ok = detail.Id > 0
            ? await DataProvider.UpdateAsync(detail, disposalTokenSource.Token)
            : await DataProvider.CreateAsync(detail, disposalTokenSource.Token);

        if (!ok)
            e.Cancel = true;
        else
        {
            // Refresh lightweight list after save
            await LoadGridDataAsync();
        }
    }
}
