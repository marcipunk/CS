@page "/wAUth"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS
@using System.Text.Json.Serialization
@using System.Net.Http.Headers



<h3>WORK Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @(isLoading ? "Logging in..." : "Login")
    </button>
</EditForm>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string ErrorMessage;

    private async Task HandleLogin()
    {
        isLoading = true;
        ErrorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync("https://work.sbdw.cobra.local/api/v1/Auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                // Store the JWT token in local storage
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                   
                    await JS.InvokeVoidAsync("localStorage.setItem", "wjwtToken", result.Token);

                    // Navigate within SPA 
                    Navigation.NavigateTo("/WRequestList");
                }
                
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
         //   Logger.LogWarning("Login failed: " + error);
            Navigation.NavigateTo("/WInvalidUser");
            
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        [JsonPropertyName("tokenString")]
        public string Token { get; set; }

        [JsonPropertyName("resetPassword")]
        public bool ResetPassword { get; set; }
    }
}