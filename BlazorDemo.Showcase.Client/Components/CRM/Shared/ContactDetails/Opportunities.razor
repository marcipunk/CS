@using BlazorDemo.Showcase.Models

@namespace BlazorDemo.Showcase.Components.ContactDetails

@inherits DataPresenter<List<Opportunity>>

@inject IToastNotificationService ToastService

<DxLayoutBreakpoint DeviceSize="DeviceSize.Medium | DeviceSize.Small | DeviceSize.XSmall" @bind-IsActive="@IsSmallScreen" />

<DxGridLayout ColumnSpacing="1em" RowSpacing="1em">
    <Columns>
        @if(IsSmallScreen) {
            <DxGridLayoutColumn Width="minmax(6.25rem, 18.75rem)" />
            <DxGridLayoutColumn />
        } else {
            <DxGridLayoutColumn Width="minmax(6.25rem, 18.75rem)" />
            <DxGridLayoutColumn Width="minmax(6.25rem, 18.75rem)" />
            <DxGridLayoutColumn />
        }
    </Columns>
    <Rows>
        @if(IsSmallScreen) {
            <DxGridLayoutRow Areas="active" Height="auto" />
            @for(var index = 0; index < active!.Count; index++) {
                <DxGridLayoutRow Areas="@($"item{index}")" Height="auto" />
            }

            <DxGridLayoutRow Areas="closed" Height="auto" />
            @for(var index = active!.Count; index < Data!.Count; index++) {
                <DxGridLayoutRow Areas="@($"item{index}")" Height="auto" />
            }
        } else {
            <DxGridLayoutRow Areas="active active" Height="auto" />
            @for(var index = 0; index < active!.Count; index += 2) {
                <DxGridLayoutRow Areas="@($"item{index} item{index + 1}")" Height="auto" />
            }

            <DxGridLayoutRow Areas="closed closed" Height="auto" />
            @for(var index = active!.Count; index < Data!.Count; index += 2) {
                <DxGridLayoutRow Areas="@($"item{index} item{index + 1}")" Height="auto" />
            }
        }
    </Rows>
    <Items>
        <DxGridLayoutItem Area="active">
            <Template>
                <div class="group-header">Active</div>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Area="closed">
            <Template>
                <div class="group-header">Closed</div>
            </Template>
        </DxGridLayoutItem>
        @{
            int index = 0;
        }
        @foreach(var opportunity in active!) {
            <DxGridLayoutItem Area="@($"item{index++}")">
                <Template>
                    @RenderOpportunity(opportunity, "active")
                </Template>
            </DxGridLayoutItem>
        }
        @foreach(var opportunity in closed!) {
            <DxGridLayoutItem Area="@($"item{index++}")">
                <Template>
                    @RenderOpportunity(opportunity, "closed")
                </Template>
            </DxGridLayoutItem>
        }
    </Items>
</DxGridLayout>

@code {
    List<Opportunity>? active;
    List<Opportunity>? closed;
    bool IsSmallScreen { get; set; }

    protected override void OnInitialized() {
        active = Data?.Take(2).ToList();
        closed = Data?.Skip(2).ToList();
        base.OnInitialized();
    }

    RenderFragment RenderOpportunity(Opportunity opportunity, string cssClass) {
        return 
            @<div class="opportunity @cssClass" @onclick="HandleOpportunityClick">
                <div class="opportunity-body">
                    <div class="name">@opportunity.Name</div>
                    <div class="product-info">
                        Products: @opportunity.Products, total:
                        @opportunity.Total.ToString("C2")
                    </div>
                    <div class="owner">Owner: @opportunity.Manager</div>
                </div>
            </div>;
    }

    void HandleOpportunityClick() {
        ToastService.ShowToast(new ToastOptions { Title = "Notification", Text = "Click opportunity event." });
    }
}
