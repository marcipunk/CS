@page "/Dashboard"

@using System.Globalization
@using BlazorDemo.Showcase.Models
@using BlazorDemo.Showcase.Services.DataProviders
@using BlazorDemo.Showcase.Components.Dashboard
@using Microsoft.AspNetCore.Authorization

@implements IDisposable

@attribute [Authorize]

@inject AnalyticDataProvider DataProvider
@inject IToastNotificationService ToastService

<DxLayoutBreakpoint MinWidth="1000" MaxWidth="1600" @bind-IsActive="@IsMediumScreen" />
<DxLayoutBreakpoint MinWidth="1600" @bind-IsActive="@IsLargeScreen" />

<div class="content-root">
    <div class="card toolbar">
        <DxToolbar Title="Dashboard" CssClass="toolbar" ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
            <Items>
                <DxToolbarItem Checked="@(DateRange == DateRange.Week)" Click="@(async _ => await SetDateRangeAsync(DateRange.Week))" Text="Week" />
                <DxToolbarItem Checked="@(DateRange == DateRange.TwoWeeks)" Click="@(async _ => await SetDateRangeAsync(DateRange.TwoWeeks))" Text="2 Weeks" />
                <DxToolbarItem Checked="@(DateRange == DateRange.Month)" Click="@(async _ => await SetDateRangeAsync(DateRange.Month))" Text="Month" />
                <DxToolbarItem Checked="@(DateRange == DateRange.Year)" Click="@(async _ => await SetDateRangeAsync(DateRange.Year))" Text="Year" />
                <DxToolbarItem Checked="@(DateRange == DateRange.All)" Click="@(async _ => await SetDateRangeAsync(DateRange.All))" Text="All" />
                <DxToolbarItem Text="Add Card" Click="OnAddCardClick" Alignment="ToolbarItemAlignment.Right" IconCssClass="add-icon icon medium-icon" />
                <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Click="@ExportData" Tooltip="Export" Enabled="@IsDataLoaded" IconCssClass="export-icon icon medium-icon" />
                <DxToolbarItem Alignment="ToolbarItemAlignment.Right" Click="@LoadDataAsync" Tooltip="Reload Data" IconCssClass="refresh-icon icon medium-icon" />
            </Items>
        </DxToolbar>
    </div>
    <div class="dashboard">
        <DxLoadingPanel Visible="@(!IsDataLoaded)"
                        IsContentBlocked="true"
                        IsContentVisible="false"
                        IndicatorVisible="true"
                        IndicatorAreaVisible="true"
                        ZIndex="101"
                        Text="Loading...">
            @if(IsDataLoaded) {
                <div>
                    <DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
                        <Rows>
                            @if(IsLargeScreen) {
                                <DxGridLayoutRow Areas="item1 item2 item3 item4" Height="auto" />
                                <DxGridLayoutRow Areas="item5 item5 item5 item5" Height="auto" />
                                <DxGridLayoutRow Areas="item5 item5 item5 item5" Height="auto" />
                                <DxGridLayoutRow Areas="item6 item6 item7 item7" Height="1fr" />
                            } else if(IsMediumScreen) {
                                <DxGridLayoutRow Areas="item1 item2" Height="auto" />
                                <DxGridLayoutRow Areas="item3 item4" Height="auto" />
                                <DxGridLayoutRow Areas="item5 item5" Height="auto" />
                                <DxGridLayoutRow Areas="item6 item7" Height="1fr" />
                            } else {
                                <DxGridLayoutRow Areas="item1" Height="auto" />
                                <DxGridLayoutRow Areas="item2" Height="auto" />
                                <DxGridLayoutRow Areas="item3" Height="auto" />
                                <DxGridLayoutRow Areas="item4" Height="auto" />
                                <DxGridLayoutRow Areas="item5" Height="auto" />
                                <DxGridLayoutRow Areas="item6" Height="auto" />
                                <DxGridLayoutRow Areas="item7" Height="1fr" />
                            }
                        </Rows>
                        <Columns>
                            @if(IsLargeScreen) {
                                <DxGridLayoutColumn />
                                <DxGridLayoutColumn />
                                <DxGridLayoutColumn />
                                <DxGridLayoutColumn />
                            } else if(IsMediumScreen) {
                                <DxGridLayoutColumn />
                                <DxGridLayoutColumn />
                            } else {
                                <DxGridLayoutColumn />
                            }
                        </Columns>
                        <Items>
                            <DxGridLayoutItem Area="item1">
                                <Template>
                                    <Ticker Title="Opportunities" Total="@GetOpportunitiesTotal()" TotalFormat="C" FormatProvider="@CultureInfo.GetCultureInfo("en-US")" Value="0.203" LabelIconCss="data-trending-icon" />
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Area="item2">
                                <Template>
                                    <Ticker Title="Revenue Total" Total="@GetRevenueTotal()" TotalFormat="C" FormatProvider="@CultureInfo.GetCultureInfo("en-US")" Value="-0.147" LabelIconCss="data-area-icon" />
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Area="item3">
                                <Template>
                                    <Ticker Title="Conversion" Total="0.16" TotalFormat="P0" Value="-0.023" LabelIconCss="data-usage-icon" />
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Area="item4">
                                <Template>
                                    <Ticker Title="Leads" Total="51" Value="0.085" LabelIconCss="data-pie-icon" />
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Area="item5" CssClass="card">
                                <Template>
                                    <div class="title">Revenue</div>
                                    <DxChart Data="@Sales">
                                        <DxChartSplineAreaSeries T="Sale"
                                                                    TArgument="DateTime"
                                                                    TValue="double"
                                                                    ArgumentField="s => s.Date!.Value"
                                                                    ValueField="s => s.Total!.Value"
                                                                    HoverMode="ChartContinuousSeriesHoverMode.None">
                                        </DxChartSplineAreaSeries>
                                        <DxChartLegend Visible="false" />
                                    </DxChart>
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Area="item6" CssClass="card">
                                <Template>
                                    <div class="title">Revenue Analysis</div>
                                    <DxGrid Data="@SalesByLocation"
                                            ShowAllRows="true"
                                            TextWrapEnabled="false"
                                            ColumnResizeMode="GridColumnResizeMode.NextColumn"
                                            HighlightRowOnHover="true">
                                        <Columns>
                                            <DxGridDataColumn Caption="State" FieldName="StateName" />
                                            <DxGridDataColumn Caption="Sales" FieldName="Total" TextAlignment="GridTextAlignment.Left">
                                                <CellDisplayTemplate Context="cellContext">
                                                    @(((SaleByLocation)cellContext.DataItem).Total!.Value.ToString("C", CultureInfo.GetCultureInfo("en-US")))
                                                </CellDisplayTemplate>
                                            </DxGridDataColumn>
                                            <DxGridDataColumn Caption="% Sold" FieldName="Percentage" DisplayFormat="P0" TextAlignment="GridTextAlignment.Left">
                                            </DxGridDataColumn>
                                            <DxGridDataColumn FieldName="Percentage">
                                                <CellDisplayTemplate Context="cellContext">
                                                    <DxProgressBar MaxValue="1" Size="100%" ShowLabel="false" Value="@(((SaleByLocation)cellContext.DataItem).Percentage!.Value)" />
                                                </CellDisplayTemplate>
                                            </DxGridDataColumn>
                                        </Columns>
                                    </DxGrid>
                                </Template>
                            </DxGridLayoutItem>
                            <DxGridLayoutItem Area="item7" CssClass="card">
                                <Template>
                                    <div class="title">Revenue Snapshot (All Products)</div>
                                    <DxPieChart Data="@SalesByCategory"
                                                InnerDiameter="0.5"
                                                T="SaleByCategory">
                                        <DxPieChartSeries T="SaleByCategory"
                                                            TArgument="string"
                                                            TValue="double"
                                                            ValueField="s => s.Value!.Value"
                                                            ArgumentField="s => s.Name"
                                                            SummaryMethod="Enumerable.Sum">
                                            <DxChartSeriesLabel Visible="true"
                                                                Position="RelativePosition.Outside"
                                                                ValueFormat="ChartElementFormat.Thousands(1)">
                                                <DxChartSeriesLabelConnector Visible="true" />
                                            </DxChartSeriesLabel>
                                        </DxPieChartSeries>
                                        <DxChartLegend HorizontalAlignment="@(IsLargeScreen ? HorizontalAlignment.Right : HorizontalAlignment.Center)"
                                                        VerticalAlignment="@(IsLargeScreen ?  VerticalEdge.Top : VerticalEdge.Bottom)"
                                                        Position="RelativePosition.Outside"
                                                        Orientation="@(IsLargeScreen ? Orientation.Vertical : Orientation.Horizontal)" />
                                    </DxPieChart>
                                </Template>
                            </DxGridLayoutItem>
                        </Items>
                    </DxGridLayout>
                </div>
            } else {
                <div class="placeholder"></div>
            }
        </DxLoadingPanel>
    </div>
</div>

@code {
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();

    DateRange DateRange { get; set; } = DateRange.All;

    (DateOnly, DateOnly) Interval =>
        DateRange switch {
            DateRange.Week => (new(2020, 1, 24), new(2020, 1, 31)),
            DateRange.TwoWeeks => (new(2020, 1, 14), new(2022, 1, 31)),
            DateRange.Month => (new(2020, 1, 1), new(2020, 2, 1)),
            DateRange.Year => (new(2020, 1, 1), new(2021, 1, 1)),
            _ => (new(2018, 1, 1), new(2022, 1, 1))
        };

    IEnumerable<Sale>? Sales { get; set; }
    IEnumerable<OpportunityByCategory>? OpportunitiesByCategory { get; set; }
    IEnumerable<SaleByLocation>? SalesByLocation { get; set; }
    IEnumerable<SaleByCategory>? SalesByCategory { get; set; }
    bool IsDataLoaded { get; set; }
    bool IsMediumScreen { get; set; }
    bool IsLargeScreen { get; set; }

    protected override async Task OnInitializedAsync() {
        await LoadDataAsync();
        await base.OnInitializedAsync();
    }

    void OnAddCardClick() => ToastService.ShowToast(new ToastOptions { Title = "Notification", Text = "Adding a new card is currently unavailable." });

    void ExportData() => ToastService.ShowToast(new ToastOptions { Title = "Notification", Text = "Export is currently unavailable." });

    async Task LoadDataAsync() {
        IsDataLoaded = false;
        var (start, end) = Interval;
        Sales = await DataProvider.GetSalesAsync(start, end, disposalTokenSource.Token);
        OpportunitiesByCategory = await DataProvider.GetOpportunitiesByCategoryAsync(start, end, disposalTokenSource.Token);
        SalesByLocation = (await DataProvider.GetSalesByLocationAsync(start, end, disposalTokenSource.Token))?
            .GroupBy(i => i.StateName!)
            .Select(g => {
                var first = g.First();
                return new SaleByLocation {
                    StateName = g.Key,
                    Total = g.Sum(i => i.Total),
                    Percentage = g.Sum(i => i.Percentage)
                };
            });
        SalesByCategory = await DataProvider.GetSalesByCategoryAsync(start, end, disposalTokenSource.Token);
        IsDataLoaded = true;
    }

    async Task SetDateRangeAsync(DateRange dateRange) {
        DateRange = dateRange;
        await LoadDataAsync();
    }

    double GetOpportunitiesTotal() => OpportunitiesByCategory?.Aggregate(0.0, (v, s) => s.Value.HasValue ? (s.Value!.Value + v) : v) ?? 0.0;

    double GetRevenueTotal() => SalesByCategory?.Aggregate(0.0, (v, s) => s.Value.HasValue ? (s.Value!.Value + v) : v) ?? 0.0;

    void IDisposable.Dispose() {
        disposalTokenSource.Cancel();
        disposalTokenSource.Dispose();
    }
}
