@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Security.Claims
@using System.Linq
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Caching.Memory
@using BlazorDemo.Showcase.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject IMemoryCache MemoryCache

<PageTitle>Log in</PageTitle>

<div class="block-content card">
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="@Input" method="post" OnValidSubmit="LoginUser" FormName="login" Context="Login">
        <DataAnnotationsValidator />
        <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
            <DxFormLayoutItem ColSpanMd="12">
                <div class="title">
                    <div class="title-text">Log in</div>
                </div>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Email" ColSpanMd="12" BeginRow="true">
                <InteractiveServerTextBox Name="Input.Email" type="email" Value="@Input.Email" />
                <ValidationMessage class="text-danger" For="() => Input.Email" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Password" ColSpanMd="12" BeginRow="true">
                <InteractiveServerTextBox Name="Input.Password" Value="@Input.Password" Password="true" NullText="This demo doesn't require a password" />
                <ValidationMessage class="text-danger" For="() => Input.Password" />
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                <InteractiveServerCheckbox Name="Input.RememberMe" InputId="rememberme" Value="@Input.RememberMe" LabelText="Remember me?"/>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Login"></DxButton>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
    <div class="or">
        <div class="or-line"></div>
        <div class="or-text">or</div>
        <div class="or-line"></div>
    </div>
    <ExternalLoginPicker />
    <div class="links-container">
        <span>Do not have a Account?</span><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Create an account</a>
    </div>
    <div class="links-container">
        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
        <div class="dot"></div>
        <a href="Account/ForgotPassword">Forgot your password?</a>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser() {
    // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
    // Resolve DEMO user by email first; fall back to username (DB login always uses demo credentials)
    var user = await UserManager.FindByEmailAsync(DemoData.UserEmail) ?? await UserManager.FindByNameAsync(DemoData.UserEmail);
        if (user is null) {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

    var result = await SignInManager.CheckPasswordSignInAsync(user, DemoData.UserPassword, lockoutOnFailure: false);
        if(result.Succeeded) {
            Logger.LogInformation("User logged in.");
            // Persist the auth cookie when RememberMe is checked
            var initialAuthProps = new AuthenticationProperties { IsPersistent = Input.RememberMe };
            if (Input.RememberMe)
                initialAuthProps.ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7);
            await SignInManager.SignInAsync(user, initialAuthProps);
            // Call external WORK API login and store token server-side
            try {
                var client = HttpClientFactory.CreateClient("WorkApi");
                var body = new { username = Input.Email, password = Input.Password };
                var response = await client.PostAsJsonAsync("api/v1/Auth/login", body);
                if(response.IsSuccessStatusCode) {
                    // Parse login response manually to avoid model binding issues
                    string? token = null;
                    try {
                        await using var loginStream = await response.Content.ReadAsStreamAsync();
                        using var loginDoc = await JsonDocument.ParseAsync(loginStream);
                        var root = loginDoc.RootElement;
                        if (root.ValueKind == JsonValueKind.Object) {
                            if (root.TryGetProperty("tokenString", out var tokenEl) && tokenEl.ValueKind == JsonValueKind.String) {
                                token = tokenEl.GetString();
                            } else if (root.TryGetProperty("token", out var tokenAlt) && tokenAlt.ValueKind == JsonValueKind.String) {
                                token = tokenAlt.GetString();
                            }
                        }
                    } catch { /* fall through with null token */ }
                    if(!string.IsNullOrWhiteSpace(token)) {
                        var http = HttpContextAccessor.HttpContext!;
                        var cookieOptions = new CookieOptions {
                            HttpOnly = true,
                            Secure = true,
                            SameSite = SameSiteMode.Lax,
                            Path = "/"
                        };
                        if(Input.RememberMe) {
                            var expires = DateTimeOffset.UtcNow.AddDays(7);
                            cookieOptions.Expires = expires;
                            cookieOptions.MaxAge = TimeSpan.FromDays(7);
                        }
                        // Proactively delete stale cookie and set the fresh token
                        http.Response.Cookies.Delete("work_token", new CookieOptions { Path = "/", HttpOnly = true, Secure = true, SameSite = SameSiteMode.Lax });
                        http.Response.Cookies.Append("work_token", token, cookieOptions);

                        // Also cache the token briefly to bridge the first request before the browser sends the cookie
                        try
                        {
                            var userId = user.Id;
                            if (!string.IsNullOrEmpty(userId))
                            {
                                var cacheKey = $"work_token:{userId}";
                                MemoryCache.Set(cacheKey, token, new MemoryCacheEntryOptions
                                {
                                    AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(2)
                                });
                            }
                            // Also set a short-lived, global bridge key to cover the very first anonymous requests
                            MemoryCache.Set("work_token:latest", token, new MemoryCacheEntryOptions
                            {
                                AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(2)
                            });
                        }
                        catch { }

                        // Immediately fetch the current external app user using the fresh token
                        try {
                            var req = new HttpRequestMessage(HttpMethod.Get, "api/v1/Auth/appuser");
                            req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                            using var appUserResp = await client.SendAsync(req);
                            if (appUserResp.IsSuccessStatusCode)
                            {
                                // Parse flexible appuser payload to handle inconsistent types
                                await using var stream = await appUserResp.Content.ReadAsStreamAsync();
                                using var doc = await JsonDocument.ParseAsync(stream);
                                var root = doc.RootElement;
                                var appUser = new WorkAppUser();
                                if (root.TryGetProperty("id", out var idEl) && idEl.TryGetInt32(out var idVal)) appUser.Id = idVal;
                                if (root.TryGetProperty("email", out var emailEl) && emailEl.ValueKind == JsonValueKind.String) appUser.Email = emailEl.GetString();
                                if (root.TryGetProperty("name", out var nameEl) && nameEl.ValueKind == JsonValueKind.String) appUser.Name = nameEl.GetString();
                                if (root.TryGetProperty("primaryTenantId", out var ptiEl)) appUser.PrimaryTenantId = ptiEl;
                                if (root.TryGetProperty("isActive", out var actEl) && (actEl.ValueKind == JsonValueKind.True || actEl.ValueKind == JsonValueKind.False)) appUser.IsActive = actEl.GetBoolean();
                                if (root.TryGetProperty("twoFactorEnabled", out var tfeEl) && (tfeEl.ValueKind == JsonValueKind.True || tfeEl.ValueKind == JsonValueKind.False)) appUser.TwoFactorEnabled = tfeEl.GetBoolean();
                                if (root.TryGetProperty("registrationDate", out var regEl) && regEl.ValueKind == JsonValueKind.String && DateTime.TryParse(regEl.GetString(), out var regDt)) appUser.RegistrationDate = regDt;
                                if (root.TryGetProperty("registrationToken", out var tokEl) && tokEl.ValueKind == JsonValueKind.String && Guid.TryParse(tokEl.GetString(), out var regTok)) appUser.RegistrationToken = regTok;
                                if (appUser != null)
                                {
                                    // Enrich current sign-in with WORK claims in the auth cookie (no DB writes)
                                    var existingIdentity = http.User.Identities.FirstOrDefault(i => i.IsAuthenticated);
                                    if (existingIdentity != null)
                                    {
                                        // Create a new identity based on the current one, but replace work:* claims
                                        var newIdentity = new ClaimsIdentity(existingIdentity);
                                        // Remove any old work:* claims to avoid duplicates
                                        foreach (var c in newIdentity.FindAll(c => c.Type.StartsWith("work:" , StringComparison.OrdinalIgnoreCase)).ToList())
                                            newIdentity.RemoveClaim(c);

                                        // Add fresh WORK claims
                                        newIdentity.AddClaim(new("work:userId", appUser.Id.ToString()));
                                        newIdentity.AddClaim(new("work:email", appUser.Email ?? string.Empty));
                                        newIdentity.AddClaim(new("work:name", appUser.Name ?? string.Empty));
                                        newIdentity.AddClaim(new("work:primaryTenantId", appUser.PrimaryTenantId.ToString()));
                                        newIdentity.AddClaim(new("work:isActive", appUser.IsActive.ToString()));
                                        newIdentity.AddClaim(new("work:twoFactorEnabled", appUser.TwoFactorEnabled.ToString()));
                                        if (appUser.RegistrationDate.HasValue)
                                            newIdentity.AddClaim(new("work:registrationDate", appUser.RegistrationDate.Value.ToString("o")));
                                        if (appUser.RegistrationToken.HasValue)
                                            newIdentity.AddClaim(new("work:registrationToken", appUser.RegistrationToken.Value.ToString()));

                                        // Also align the standard Name/Email claims with WORK values so any UI using them shows the correct user
                                        foreach (var c in newIdentity.FindAll(ClaimTypes.Name).ToList())
                                            newIdentity.RemoveClaim(c);
                                        foreach (var c in newIdentity.FindAll(ClaimTypes.Email).ToList())
                                            newIdentity.RemoveClaim(c);
                                        if (!string.IsNullOrWhiteSpace(appUser.Name))
                                            newIdentity.AddClaim(new(ClaimTypes.Name, appUser.Name));
                                        if (!string.IsNullOrWhiteSpace(appUser.Email))
                                            newIdentity.AddClaim(new(ClaimTypes.Email, appUser.Email));

                                        var authProps = new AuthenticationProperties { IsPersistent = Input.RememberMe };
                                        if (Input.RememberMe)
                                            authProps.ExpiresUtc = DateTimeOffset.UtcNow.AddDays(7);
                                        await http.SignInAsync(IdentityConstants.ApplicationScheme, new ClaimsPrincipal(newIdentity), authProps);
                                    }
                                }
                            }
                            else
                            {
                                var txt = await appUserResp.Content.ReadAsStringAsync();
                                Logger.LogWarning("Fetching WORK appuser failed: {Error}", txt);
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError(ex, "WORK appuser call failed");
                        }
                    } else {
                        Logger.LogWarning("WORK login succeeded but token missing.");
                    }
                } else {
                    var errorText = await response.Content.ReadAsStringAsync();
                    Logger.LogWarning("WORK login failed: {Error}", errorText);
                }
            } catch(Exception ex) {
                Logger.LogError(ex, "WORK login call failed");
            }
            RedirectManager.RedirectTo(ReturnUrl);
        } else if(result.RequiresTwoFactor) {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        } else if(result.IsLockedOut) {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        } else if (result.IsNotAllowed) {
            // Likely requires confirmed account or other restriction
            errorMessage = "Error: Account not allowed to sign in (email unconfirmed?).";
        } else {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    protected override void OnInitialized() {
        if (string.IsNullOrWhiteSpace(Input.Email))
            Input.Email = DemoData.UserEmail;
        if (string.IsNullOrWhiteSpace(Input.Password))
            Input.Password = DemoData.UserPassword;
        base.OnInitialized();
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    private sealed class LoginResponse {
        public string? TokenString { get; set; }
        public bool ResetPassword { get; set; }
    }

    // Minimal model to deserialize the external app user response
    private sealed class WorkAppUser
    {
        public int Id { get; set; }
        public string? Email { get; set; }
        public string? Name { get; set; }
    public JsonElement PrimaryTenantId { get; set; }
        public bool IsActive { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public DateTime? RegistrationDate { get; set; }
        public Guid? RegistrationToken { get; set; }
        public List<object>? TenantAppUsers { get; set; }
        public List<object>? CustomerAppUsers { get; set; }
        public List<object>? TenantConnectionRequests { get; set; }
    }
}
